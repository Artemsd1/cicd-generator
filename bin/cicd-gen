const { program } = require('commander');
const CICDGenerator = require('../src/index');
const ProjectAnalyzer = require('../src/core/project-analyzer');

// Команда генерации
program
  .command('generate')
  .description('Генерация CI/CD конфигураций')
  .option('-p, --path <path>', 'путь к проекту', process.cwd())
  .option('-o, --output <path>', 'папка для вывода', './generated')
  .option('-t, --type <type>', 'тип проекта')
  .option('-v, --verbose', 'подробный вывод')
  .option('-i, --interactive', 'интерактивный режим')
  .action(async (options) => {
    try {
      const generator = new CICDGenerator();
      await generator.generate(options);
    } catch (error) {
      console.error('Ошибка:', error.message);
      process.exit(1);
    }
  });

// Команда анализа (БЕЗ генерации файлов)
program
  .command('analyze')
  .description('Анализ проекта без генерации файлов')
  .option('-p, --path <path>', 'путь к проекту', process.cwd())
  .option('-v, --verbose', 'подробный вывод')
  .action(async (options) => {
    try {
      const analyzer = new ProjectAnalyzer();
      const projectData = await analyzer.analyze(options.path);
      
      console.log('Анализ завершен');
      console.log('Тип проекта:', projectData.type);
      console.log('Фреймворк:', projectData.framework);
      console.log('Менеджер пакетов:', projectData.packageManager);
      console.log('Версия Node.js:', projectData.nodeVersion);
      
      if (options.verbose) {
        console.log('\nПодробная информация:');
        console.log(JSON.stringify(projectData, null, 2));
      }
      
    } catch (error) {
      console.error('Ошибка анализа:', error.message);
      process.exit(1);
    }
  });

// Команда валидации
program
  .command('validate')
  .description('Валидация конфигураций')
  .option('-p, --path <path>', 'путь к конфигурациям', process.cwd())
  .action(async (options) => {
    // логика валидации
  });

program.parse();